{"version":3,"sources":["serviceWorker.ts","api/tasks-api.ts","api/base-api.ts","state/tasks-reducer.ts","state/todolists-reducer.ts","state/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Todolist/TodoList.tsx","components/AppWithRedux/AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TasksStatuses","TasksPriorities","axios","create","baseURL","withCredentials","headers","initialState","rootReducer","combineReducers","tasks","state","action","type","todolistId","filter","t","id","taskId","newTask","v1","title","todoListId","status","New","startDate","deadline","addedDate","order","priority","Low","completed","description","map","el","newState","todolists","tl","todolist","find","store","createStore","AddItemForm","React","memo","props","console","log","useState","val","setVal","error","setError","addNewItem","trim","addItem","onBlur","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","onFocus","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","newTitle","setNewTitle","autoFocus","onSaveTitle","onDoubleClick","Task","changeTaskStatus","changeTaskTitle","removeTask","task","onRemoveTask","useCallback","onChangeHandler","checked","Completed","changeT","key","Checkbox","Delete","TodoList","onChangeTitleList","removeTodoList","addTask","changeFilter","tasksForTodoList","tasksEls","changeStatus","onSaveNewTaskTitle","updateTitleTask","removeTodolist","createTask","onFilterAll","onFilterActive","onFilterComplete","Grid","container","spacing","item","Button","className","AppWithRedux","todoLists","useSelector","dispatch","useDispatch","addTodoList","AddTodolistAC","ChangeTodolistFilterAC","ChangeTodolistTitleAC","removeTaskAC","addTaskAC","changeTaskTitleAC","changeTaskStatusAC","RemoveTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","style","padding","Paper","elevation","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICDMC,EAMAC,E,wDCrBYC,EAAMC,OAAO,CACjCC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2C,SDWPN,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KA4BL,IEhBDM,EAA+B,GCA/BA,EAA0C,G,QC7B1CC,EAAcC,YAAgB,CAClCC,MF8B0B,WAGP,IAFnBC,EAEkB,uDAFMJ,EACxBK,EACkB,uCAClB,OAAQA,EAAOC,MACb,IAAK,cACH,OAAO,2BACFF,GADL,kBAEGC,EAAOE,WAAa,YAAIH,EAAMC,EAAOE,aAAaC,QACjD,SAACC,GAAD,OAAOA,EAAEC,KAAOL,EAAOM,YAG7B,IAAK,WACH,IAAMC,EAAU,CACdF,GAAIG,cACJC,MAAOT,EAAOS,MACVC,WAAYV,EAAOE,WACnBS,OAAQvB,EAAcwB,IACtBC,UAAW,GACXC,SAAU,GACVC,UAAW,GACXC,MAAO,EACPC,SAAU5B,EAAgB6B,IAC1BC,WAAW,EACXC,YAAa,IAEnB,OAAO,2BACFrB,GADL,kBAEGC,EAAOE,WAFV,CAEwBK,GAFxB,mBAEoCR,EAAMC,EAAOE,gBAEnD,IAAK,qBACH,OAAO,2BACFH,GADL,kBAEGC,EAAOE,WAAYH,EAAMC,EAAOE,YAAYmB,KAAI,SAAAC,GAAE,OAAGA,EAAGjB,KAAKL,EAAOK,GAAhB,YAAC,eAAwBiB,GAAzB,IAA4BX,OAAQX,EAAOW,SAAQW,OAO5G,IAAK,oBACH,OAAO,2BACFvB,GADL,kBAEGC,EAAOE,WAAaH,EAAMC,EAAOE,YAAYmB,KAAI,SAAAC,GAAE,OAAGA,EAAGjB,KAAKL,EAAOK,GAAhB,YAAC,eAAwBiB,GAAzB,IAA4Bb,MAAOT,EAAOS,QAAOa,OAO3G,IAAK,eACH,OAAO,2BACFvB,GADL,kBAEGC,EAAOE,WAAa,KAEzB,IAAK,kBACH,IAAMqB,EAAQ,eAAQxB,GAGtB,cAFOwB,EAASvB,EAAOK,IAEhBkB,EACT,QACE,OAAOxB,IE1FXyB,UD6B8B,WAGC,IAF7BzB,EAE4B,uDAFOJ,EACnCK,EAC4B,uCAC5B,OAAQA,EAAOC,MACX,IAAK,kBACD,OAAOF,EAAMI,QAAO,SAACsB,GAAD,OAAQA,EAAGpB,KAAOL,EAAOK,MACjD,IAAK,eACD,MAAM,GAAN,mBACON,GADP,CAEI,CACIM,GAAIL,EAAOE,WACXO,MAAOT,EAAOS,MACdN,OAAQ,MACRY,UAAW,GACXC,MAAO,KAGnB,IAAK,wBACD,IAAMU,EAAW3B,EAAM4B,MAAK,SAACF,GAAD,OAAQA,EAAGpB,KAAOL,EAAOK,MAKrD,OAJIqB,IAEAA,EAASjB,MAAQT,EAAOS,OAErB,YAAIV,GAEf,IAAK,yBAMD,OAAOA,EAAMsB,KAAI,SAACI,GAAD,OACbA,EAAGpB,KAAOL,EAAOK,GAAjB,2BAA0BoB,GAA1B,IAA8BtB,OAAQH,EAAOG,SAAUsB,KAG/D,QACI,OAAO1B,MC/DN6B,EAAQC,YAAYjC,GAMjCZ,OAAO4C,MAAQA,E,8CCoCAE,EA7CKC,IAAMC,MAAK,SAACC,GAC5BC,QAAQC,IAAI,yBADgD,MAGxCC,mBAAiB,IAHuB,mBAGvDC,EAHuD,KAGlDC,EAHkD,OAIpCF,mBAAwB,MAJY,mBAIvDG,EAJuD,KAIhDC,EAJgD,KAiBtDC,EAAa,WACI,KAAfJ,EAAIK,OACJT,EAAMU,QAAQN,GAEdG,EAAS,qBAEbF,EAAO,KAGX,OACI,yBAAKM,OAAQ,kBAAMJ,EAAS,QACxB,kBAACK,EAAA,EAAD,CACIC,QAAS,WACTC,MAAOV,EACPW,SAzBU,SAACC,GACL,OAAVV,GAAgBC,EAAS,MAC7BF,EAAOW,EAAEC,cAAcH,QAwBfI,WAtBU,SAACF,GACL,OAAVV,GAAgBC,EAAS,MAEV,KAAfS,EAAEG,UACFX,KAmBIY,QAAS,kBAAMb,EAAS,OACxBc,MAAO,QACPf,QAASA,EACTgB,WAAYhB,IAEhB,kBAACiB,EAAA,EAAD,CAAYC,MAAO,UAAWC,QAASjB,GACnC,kBAACkB,EAAA,EAAD,W,iFCvCHC,EAAe7B,IAAMC,MAAK,SAACC,GACtCC,QAAQC,IAAI,gBAD2D,MAEzCC,oBAAkB,GAFuB,mBAElEyB,EAFkE,KAExDC,EAFwD,OAGzC1B,mBAAiB,IAHwB,mBAGlE2B,EAHkE,KAGxDC,EAHwD,KAqBvE,OAAOH,EAOL,kBAAChB,EAAA,EAAD,CACEoB,WAAW,EACXrB,OAtBgB,WACdmB,EAASrB,OACXT,EAAMiC,YAAYH,GAElBC,EAAY/B,EAAMxB,OAEpBqD,GAAY,IAiBVf,MAAOgB,EACPf,SAfgB,SAACC,GACnBe,EAAYf,EAAEC,cAAcH,UAiB5B,0BAAMoB,cA/BW,WACjBH,EAAY/B,EAAMxB,OAClBqD,GAAY,KA6BsB7B,EAAMxB,U,SC9B/B2D,EAAOrC,IAAMC,MAAK,SAACC,GAA0B,IAE/CoC,EAA6DpC,EAA7DoC,iBAAkBC,EAA2CrC,EAA3CqC,gBAAiBC,EAA0BtC,EAA1BsC,WAAYrE,EAAc+B,EAAd/B,WAFD,EAGzB+B,EAAMuC,KAA3BnE,EAH8C,EAG9CA,GAAIM,EAH0C,EAG1CA,OAAQF,EAHkC,EAGlCA,MAEbgE,EAAeC,uBAAY,kBAAMH,EAAWlE,EAAIH,KAAa,CAACG,EAAIH,EAAYqE,IAE9EI,EAAkBD,uBAAY,SAACzB,GACjC,IAAItC,EAASsC,EAAEC,cAAc0B,QAAUxF,EAAcyF,UAAYzF,EAAcwB,IAC/EyD,EAAiBhE,EAAIM,EAAQT,KAC9B,CAACG,EAAIH,EAAYmE,IAEdS,EAAUJ,uBAAY,SAACX,GACzBO,EAAgBP,EAAU1D,EAAIH,KAC/B,CAACG,EAAIH,EAAYoE,IAEpB,OACI,yBAAKS,IAAK1E,GACN,kBAAC2E,EAAA,EAAD,CACIJ,QAASjE,IAAWvB,EAAcyF,UAClC7B,SAAU2B,EACVlB,MAAO,YAEX,kBAACG,EAAD,CAAcnD,MAAOA,EAAOyD,YAAaY,IACzC,kBAACtB,EAAA,EAAD,CAAYE,QAASe,GACjB,kBAACQ,EAAA,EAAD,WChBHC,EAAWnD,IAAMC,MAAK,SAACC,GAChCC,QAAQC,IAAI,sBADiD,MAGjCF,EAAMP,SAA3BrB,EAHsD,EAGtDA,GAAIF,EAHkD,EAGlDA,OAAQM,EAH0C,EAG1CA,MACZ0E,EAA4DlD,EAA5DkD,kBAAmBC,EAAyCnD,EAAzCmD,eAAgBC,EAAyBpD,EAAzBoD,QAASC,EAAgBrD,EAAhBqD,aAG/CC,EAAmBtD,EAAMnC,MAEd,WAAXK,IACAoF,EAAmBA,EAAiBpF,QAAO,SAACmB,GAAD,OAAQA,EAAGX,SAAWvB,EAAcwB,QAEpE,cAAXT,IACAoF,EAAmBA,EAAiBpF,QAAO,SAACmB,GAAD,OAAQA,EAAGX,SAAWvB,EAAcyF,cAGnF,IAAIW,EAAWD,EAAiBlE,KAAI,SAACC,GACjC,OACI,kBAAC8C,EAAD,CACIC,iBAAkBpC,EAAMwD,aACxBnB,gBAAiBrC,EAAMyD,mBACvBnB,WAAYtC,EAAMsC,WAClBC,KAAMlD,EACNpB,WAAYG,OAKlBsF,EAAkBjB,uBAAY,SAACX,GAAD,OAAcoB,EAAkBpB,EAAU1D,KAAK,CAACA,EAAI8E,IAElFS,EAAiBlB,uBAAY,kBAAMU,EAAe/E,KAAK,CAAC+E,EAAgB/E,IAExEwF,EAAanB,uBAAY,SAACrC,GAAD,OAASgD,EAAQhD,EAAKhC,KAAK,CAACgF,EAAShF,IAE9DyF,EAAcpB,uBAAY,kBAAMY,EAAa,MAAOjF,KAAK,CAACiF,EAAcjF,IAExE0F,EAAiBrB,uBAAY,kBAAMY,EAAa,SAAUjF,KAAK,CAACiF,EAAcjF,IAE9E2F,EAAmBtB,uBAAY,kBAAMY,EAAa,YAAajF,KAAK,CAACiF,EAAcjF,IAiCzF,OACI,6BACI,4BACI,kBAACuD,EAAD,CACInD,MAAOA,EACPyD,YAAayB,IAEjB,kBAACnC,EAAA,EAAD,CAAYE,QAASkC,GACjB,kBAACX,EAAA,EAAD,QAGR,kBAAC,EAAD,CAAatC,QAASkD,IACtB,6BAAML,GACN,kBAACS,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACC,EAAA,EAAD,CACIvD,QAAoB,QAAX3C,EAAmB,YAAc,WAC1CuD,QAASoC,EACTQ,UAAsB,QAAXnG,EAAmB,gBAAkB,IAHpD,QAQJ,kBAAC8F,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACC,EAAA,EAAD,CACIvD,QAAoB,WAAX3C,EAAsB,YAAc,WAC7CsD,MAAO,YACPC,QAASqC,EACTO,UAAsB,WAAXnG,EAAsB,gBAAkB,IAJvD,WASJ,kBAAC8F,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACC,EAAA,EAAD,CACIvD,QAAoB,cAAX3C,EAAyB,YAAc,WAChDsD,MAAO,UACPC,QAASsC,EACTM,UAAsB,cAAXnG,EAAyB,gBAAkB,IAJ1D,mBCtBLoG,MAtFf,WACI,IAAIC,EAAYC,aACZ,SAAC1G,GAAD,OAAWA,EAAMyB,aAEjB1B,EAAQ2G,aAA8C,SAAA1G,GAAK,OAAIA,EAAMD,SACrE4G,EAAWC,cAGTC,EAAclC,uBAAY,SAACjE,GACzBiG,ENuDiB,SAACjG,GAC1B,MAAO,CAACR,KAAM,eAAgBQ,QAAOP,WAAYM,eMxDhCqG,CAAcpG,MAE3B,CAACiG,IAGCpB,EAAeZ,uBAAY,SAACvE,EAA0BD,GACxDwG,EN0D8B,SAClCvG,EACAD,GAEA,MAAO,CAACD,KAAM,yBAA0BE,OAAQA,EAAQE,GAAIH,GM9D/C4G,CAAuB3G,EAAQD,MACzC,CAACwG,IAEEvB,EAAoBT,uBAAY,SAACxE,EAAoBO,GACvDiG,ENgD6B,SACjCxG,EACAO,GAEA,MAAO,CAACR,KAAM,wBAAyBQ,MAAOA,EAAOJ,GAAIH,GMpD5C6G,CAAsB7G,EAAYO,MAC5C,CAACiG,IAEEnC,EAAaG,uBAAY,SAACpE,EAAgBJ,GAC5CwG,EP4DoB,SAC1BpG,EACAJ,GAEA,MAAO,CAAED,KAAM,cAAeK,SAAQJ,cOhEvB8G,CAAa1G,EAAQJ,MAC/B,CAACwG,IAEErB,EAAUX,uBAAY,SAACjE,EAAeP,GACxCwG,EP8DiB,SAACjG,EAAeP,GACvC,MAAO,CAAED,KAAM,WAAYQ,QAAOP,cO/DnB+G,CAAUxG,EAAOP,MAC3B,CAACwG,IAEEhB,EAAqBhB,uBAAY,SAACrE,EAAYI,EAAeP,GAC/DwG,EPqEyB,SAC/BrG,EACAI,EACAP,GAEA,MAAO,CAAED,KAAM,oBAAqBI,KAAII,QAAOP,cO1EhCgH,CAAkB7G,EAAII,EAAOP,MACvC,CAACwG,IAGErC,EAAmBK,uBAAY,SAACrE,EAAYM,EAAuBT,GACrEwG,EPyD0B,SAChCrG,EACAM,EACAT,GAEA,MAAO,CAAED,KAAM,qBAAsBI,KAAIM,SAAQT,cO9DlCiH,CAAmB9G,EAAIM,EAAQT,MACzC,CAACwG,IAGEtB,EAAiBV,uBAAY,SAACxE,GAChCwG,ENkBwB,SAC5BxG,GAEA,MAAO,CAACD,KAAM,kBAAmBI,GAAIH,GMrBxBkH,CAAiBlH,MAC3B,CAACwG,IAGJ,OACI,yBAAKJ,UAAU,OACX,kBAACe,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAAC/D,EAAA,EAAD,CAAYgE,KAAK,QAAQ/D,MAAM,UAAUgE,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAY7E,QAAQ,MAApB,QACA,kBAACuD,EAAA,EAAD,CAAQ5C,MAAM,WAAd,WAGR,kBAACmE,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC5B,EAAA,EAAD,CAAMC,WAAS,EAAC4B,MAAO,CAACC,QAAS,SAC7B,kBAAC,EAAD,CAAapF,QAASiE,KAG1B,kBAACX,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACpBK,EAAUnF,KAAI,SAACI,GACZ,OACI,kBAACwE,EAAA,EAAD,CAAMG,MAAI,EAACrB,IAAKtD,EAAGpB,IACf,kBAAC2H,EAAA,EAAD,CAAOC,UAAW,EAAGH,MAAO,CAACC,QAAS,SAClC,kBAAC7C,EAAD,CAAUxD,SAAUD,EACV6D,aAAcA,EACdH,kBAAmBA,EACnBrF,MAAOA,EAAM2B,EAAGpB,IAChBkE,WAAYA,EACZc,QAASA,EACTK,mBAAoBA,EACpBD,aAAcpB,EACde,eAAgBA,aCrF9D8C,IAASC,OACP,kBAAC,IAAD,CAAUvG,MAAOA,GACf,kBAAC,EAAD,OAEFwG,SAASC,eAAe,SX+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArG,GACLL,QAAQK,MAAMA,EAAMsG,a","file":"static/js/main.71aeaad6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {instance} from \"./base-api\";\r\nimport {IResponseType} from \"./todolist-api\";\r\n\r\nexport type ITaskPropertiesUpdateType = {\r\n    title: string\r\n    description: string | null\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<ITaskType>;\r\n};\r\n\r\nexport enum TasksStatuses{\r\n    New=0,\r\n    InProgress=1,\r\n    Completed=2,\r\n    Draft=3\r\n}\r\nexport enum TasksPriorities{\r\n    Low =0,\r\n    Middle=1,\r\n    Hi=2,\r\n    Urgently=3,\r\n    Later=4\r\n}\r\n\r\nexport type ITaskType = {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    completed: boolean\r\n    status: TasksStatuses\r\n    priority: TasksPriorities\r\n    startDate: string\r\n    deadline: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype ITasksResponseType = {\r\n    items: ITaskType[],\r\n    error: string,\r\n    totalCount: number\r\n}\r\n\r\nexport const tasksApi = {\r\n    getTasks(todolistId: string) {\r\n        return instance\r\n            .get<ITasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n            .then(res => res.data)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return instance\r\n            .post<IResponseType<{item:ITaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n            .then(res => res.data)\r\n    },\r\n    deleteTask(todolistId: string,taskId:string){\r\n        return instance\r\n            .delete<IResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n            .then(res=>res.data)\r\n    },\r\n    updateTask(todolistId: string,taskId:string,properties:ITaskPropertiesUpdateType){\r\n        return instance\r\n            .put<IResponseType<{item:ITaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`,properties)\r\n            .then(res=>res.data)\r\n    }\r\n}","import axios from \"axios\";\n\nexport const instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    withCredentials: true,\n    headers: {\n        \"api-key\": \"1f62f832-199c-4198-bcf8-fa36b24e67ca\",\n    },\n});\n","import {v1} from \"uuid\";\nimport {AddTodolistActionType, RemoveTodolistActionType,} from \"./todolists-reducer\";\nimport {TasksPriorities, TasksStateType, TasksStatuses} from \"../api/tasks-api\";\n\nexport type RemoveTaskType = {\n  type: \"REMOVE_TASK\";\n  taskId: string;\n  todolistId: string;\n};\nexport type AddTaskType = {\n  type: \"ADD_TASK\";\n  title: string;\n  todolistId: string;\n};\nexport type ChangeTaskStatusType = {\n  type: \"CHANGE_STATUS_TASK\";\n  id: string;\n  status:TasksStatuses\n  todolistId: string;\n};\nexport type ChangeTaskTitleType = {\n  type: \"CHANGE_TITLE_TASK\";\n  id: string;\n  title: string;\n  todolistId: string;\n};\n\nexport type ActionsType =\n  | RemoveTaskType\n  | AddTaskType\n  | ChangeTaskStatusType\n  | ChangeTaskTitleType\n  | AddTodolistActionType\n  | RemoveTodolistActionType;\n\nconst initialState: TasksStateType = {};\n\nexport const tasksReducer = (\n  state: TasksStateType = initialState,\n  action: ActionsType\n):TasksStateType => {\n  switch (action.type) {\n    case \"REMOVE_TASK\":\n      return {\n        ...state,\n        [action.todolistId]: [...state[action.todolistId]].filter(\n          (t) => t.id !== action.taskId\n        ),\n      };\n    case \"ADD_TASK\":\n      const newTask = {\n        id: v1(),\n        title: action.title,\n            todoListId: action.todolistId,\n            status: TasksStatuses.New,\n            startDate: '',\n            deadline: '',\n            addedDate: '',\n            order: 0,\n            priority: TasksPriorities.Low,\n            completed: true,\n            description: '',\n      };\n      return {\n        ...state,\n        [action.todolistId]: [newTask, ...state[action.todolistId]],\n      };\n    case \"CHANGE_STATUS_TASK\":\n      return {\n        ...state,\n        [action.todolistId]:state[action.todolistId].map(el=>(el.id===action.id)? {...el,status: action.status}:el)\n      /*  [action.todolistId]: newArr(\n          state[action.todolistId],\n          action.id,\n          action.status\n        ),*/\n      };\n    case \"CHANGE_TITLE_TASK\":\n      return {\n        ...state,\n        [action.todolistId]: state[action.todolistId].map(el=>(el.id===action.id)? {...el,title: action.title}:el)\n          //   newArr(\n          // state[action.todolistId],\n          // action.id,\n          // action.title\n        // ),\n      };\n    case \"ADD-TODOLIST\":\n      return {\n        ...state,\n        [action.todolistId]: [],\n      };\n    case \"REMOVE-TODOLIST\":\n      const newState = { ...state };\n      delete newState[action.id];\n\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport const removeTaskAC = (\n  taskId: string,\n  todolistId: string\n): RemoveTaskType => {\n  return { type: \"REMOVE_TASK\", taskId, todolistId };\n};\nexport const addTaskAC = (title: string, todolistId: string): AddTaskType => {\n  return { type: \"ADD_TASK\", title, todolistId };\n};\n\nexport const changeTaskStatusAC = (\n  id: string,\n  status:TasksStatuses,\n  todolistId: string\n): ChangeTaskStatusType => {\n  return { type: \"CHANGE_STATUS_TASK\", id, status, todolistId };\n};\nexport const changeTaskTitleAC = (\n  id: string,\n  title: string,\n  todolistId: string\n): ChangeTaskTitleType => {\n  return { type: \"CHANGE_TITLE_TASK\", id, title, todolistId };\n};\n\n// const newArr = (\n//   tasks: Array<ITaskType>,\n//   taskId: string,\n//   property: boolean | string |TasksStatuses |TasksPriorities\n// ): Array<ITaskType> => {\n//   let propName = typeof property === \"boolean\" ? \"isDone\" : \"title\";\n//\n//   return tasks.map((t) =>\n//     t.id === taskId ? { ...t, [propName]: property } : t\n//   );\n// };\n","import {v1} from \"uuid\";\nimport {ITodolistType} from \"../api/todolist-api\";\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\n\nexport type ITodoListDomenType = ITodolistType & {\n    filter: FilterValuesType\n}\n\nexport type RemoveTodolistActionType = {\n    type: \"REMOVE-TODOLIST\";\n    id: string;\n};\nexport type AddTodolistActionType = {\n    type: \"ADD-TODOLIST\";\n    title: string;\n    todolistId: string;\n};\nexport type ChangeTodolistTitleActionType = {\n    type: \"CHANGE-TODOLIST-TITLE\";\n    id: string;\n    title: string;\n};\nexport type ChangeTodolistFilterActionType = {\n    type: \"CHANGE-TODOLIST-FILTER\";\n    id: string;\n    filter: FilterValuesType;\n};\n\ntype ActionsType =\n    | RemoveTodolistActionType\n    | AddTodolistActionType\n    | ChangeTodolistTitleActionType\n    | ChangeTodolistFilterActionType;\n\nconst initialState: Array<ITodoListDomenType> = [];\n\nexport const todolistsReducer = (\n    state: Array<ITodoListDomenType> = initialState,\n    action: ActionsType\n): Array<ITodoListDomenType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter((tl) => tl.id !== action.id);\n        case \"ADD-TODOLIST\":\n            return [\n                ...state,\n                {\n                    id: action.todolistId,\n                    title: action.title,\n                    filter: \"all\",\n                    addedDate: '',\n                    order: 0\n                },\n            ];\n        case \"CHANGE-TODOLIST-TITLE\": {\n            const todolist = state.find((tl) => tl.id === action.id);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                todolist.title = action.title;\n            }\n            return [...state];\n        }\n        case \"CHANGE-TODOLIST-FILTER\": {\n            /*const todolist = state.find((tl) => tl.id === action.id);\n            if (todolist) {\n              // если нашёлся - изменим ему заголовок\n              todolist.filter = action.filter;\n            }*/\n            return state.map((tl) =>\n                tl.id === action.id ? {...tl, filter: action.filter} : tl\n            );\n        }\n        default:\n            return state;\n    }\n};\n\nexport const RemoveTodolistAC = (\n    todolistId: string\n): RemoveTodolistActionType => {\n    return {type: \"REMOVE-TODOLIST\", id: todolistId};\n};\nexport const AddTodolistAC = (title: string): AddTodolistActionType => {\n    return {type: \"ADD-TODOLIST\", title, todolistId: v1()};\n};\nexport const ChangeTodolistTitleAC = (\n    todolistId: string,\n    title: string\n): ChangeTodolistTitleActionType => {\n    return {type: \"CHANGE-TODOLIST-TITLE\", title: title, id: todolistId};\n};\nexport const ChangeTodolistFilterAC = (\n    filter: FilterValuesType,\n    todolistId: string\n): ChangeTodolistFilterActionType => {\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter: filter, id: todolistId};\n};\n","import { tasksReducer } from \"./tasks-reducer\";\nimport { todolistsReducer } from \"./todolists-reducer\";\nimport { combineReducers, createStore } from \"redux\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todolists: todolistsReducer,\n});\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\nexport type AddItemFormPropsType = {\n    addItem: (val: string) => void;\n};\n\nconst AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    console.log(\"AddItemForm is called\");\n\n    let [val, setVal] = useState<string>(\"\");\n    let [error, setError] = useState<string | null>(null);\n\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        if (error !== null) setError(null);\n        setVal(e.currentTarget.value);\n    };\n    const onKeyPressAdd = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) setError(null);\n\n        if (e.charCode === 13) {\n            addNewItem();\n        }\n    };\n    const addNewItem = () => {\n        if (val.trim() !== \"\") {\n            props.addItem(val);\n        } else {\n            setError(\"Title is required\");\n        }\n        setVal(\"\");\n    };\n\n    return (\n        <div onBlur={() => setError(null)}>\n            <TextField\n                variant={\"outlined\"}\n                value={val}\n                onChange={onChangeInput}\n                onKeyPress={onKeyPressAdd}\n                onFocus={() => setError(null)}\n                label={\"Title\"}\n                error={!!error}\n                helperText={error}\n            />\n            <IconButton color={\"primary\"} onClick={addNewItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    );\n});\n\nexport default AddItemForm;\n","import React, { ChangeEvent, useState } from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\nexport type EditableSpanPropsType = {\n  title: string;\n  onSaveTitle: (newTitle: string) => void;\n};\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  console.log(\"EditableSpan\");\n  let [editMode, setEditMode] = useState<boolean>(false);\n  let [newTitle, setNewTitle] = useState<string>(\"\");\n  const onEditMode = () => {\n    setNewTitle(props.title);\n    setEditMode(true);\n  };\n  const offEditMode = () => {\n    if (newTitle.trim()) {\n      props.onSaveTitle(newTitle);\n    } else {\n      setNewTitle(props.title);\n    }\n    setEditMode(false);\n  };\n\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(e.currentTarget.value);\n  };\n\n  return editMode ? (\n    /*<input\n          autoFocus={true}\n          onBlur={offEditMode}\n          value={newTitle}\n          onChange={changeTitle}\n        />*/\n    <TextField\n      autoFocus={true}\n      onBlur={offEditMode}\n      value={newTitle}\n      onChange={changeTitle}\n    />\n  ) : (\n    <span onDoubleClick={onEditMode}>{props.title}</span>\n  );\n});\n","import React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {ITaskType, TasksStatuses} from \"../../api/tasks-api\";\n\ntype TaskPropsType = {\n    changeTaskStatus: (taskId: string, status: TasksStatuses, todoListID: string) => void;\n    changeTaskTitle: (newTitle: string, taskId: string, todoListId: string) => void;\n    removeTask: (id: string, todoListId: string) => void;\n    task: ITaskType;\n    todolistId: string\n};\nexport const Task = React.memo((props: TaskPropsType) => {\n\n    const {changeTaskStatus, changeTaskTitle, removeTask, todolistId} = props;\n    const {id, status, title} = props.task;\n\n    const onRemoveTask = useCallback(() => removeTask(id, todolistId), [id, todolistId, removeTask]);\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let status = e.currentTarget.checked ? TasksStatuses.Completed : TasksStatuses.New; //new value checked for checked task\n        changeTaskStatus(id, status, todolistId);\n    }, [id, todolistId, changeTaskStatus]);\n\n    const changeT = useCallback((newTitle: string) => {\n        changeTaskTitle(newTitle, id, todolistId);\n    }, [id, todolistId, changeTaskTitle]);\n\n    return (\n        <div key={id}>\n            <Checkbox\n                checked={status === TasksStatuses.Completed}\n                onChange={onChangeHandler}\n                color={\"primary\"}\n            />\n            <EditableSpan title={title} onSaveTitle={changeT}/>\n            <IconButton onClick={onRemoveTask}>\n                <Delete/>\n            </IconButton>\n        </div>\n    );\n});\n","import React, {useCallback} from \"react\";\nimport AddItemForm from \"../AddItemForm/AddItemForm\";\nimport {Grid, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport Button from \"@material-ui/core/Button\";\nimport {FilterValuesType, ITodoListDomenType,} from \"../../state/todolists-reducer\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Task} from \"../Task/Task\";\nimport {ITaskType, TasksStatuses} from \"../../api/tasks-api\";\n\ntype TodoListPropsType = {\n    todolist: ITodoListDomenType\n    changeFilter: (filter: FilterValuesType, todolistId: string) => void\n    onChangeTitleList: (newTitle: string, todoListId: string) => void;\n    tasks: Array<ITaskType>;\n    removeTask: (id: string, todoListId: string) => void;\n    addTask: (val: string, todoListId: string) => void;\n    onSaveNewTaskTitle: (newTitle: string, taskId: string, todoListId: string) => void;\n    changeStatus: (taskId: string, status: TasksStatuses, todoListID: string) => void;\n    removeTodoList: (todoListID: string) => void;\n};\n\nexport const TodoList = React.memo((props: TodoListPropsType) => {\n    console.log(\"TodoList is called\");\n\n    const {id, filter, title} = props.todolist;\n    const {onChangeTitleList, removeTodoList, addTask, changeFilter} = props;\n\n    //to filter tasks\n    let tasksForTodoList = props.tasks;\n\n    if (filter === \"active\") {\n        tasksForTodoList = tasksForTodoList.filter((el) => el.status === TasksStatuses.New);\n    }\n    if (filter === \"completed\") {\n        tasksForTodoList = tasksForTodoList.filter((el) => el.status === TasksStatuses.Completed);\n    }\n\n    let tasksEls = tasksForTodoList.map((el: ITaskType) => {\n        return (\n            <Task\n                changeTaskStatus={props.changeStatus}\n                changeTaskTitle={props.onSaveNewTaskTitle}\n                removeTask={props.removeTask}\n                task={el}\n                todolistId={id}\n            />\n        );\n    });\n\n    const updateTitleTask = useCallback((newTitle) => onChangeTitleList(newTitle, id), [id, onChangeTitleList])\n\n    const removeTodolist = useCallback(() => removeTodoList(id), [removeTodoList, id])\n\n    const createTask = useCallback((val) => addTask(val, id), [addTask, id])\n\n    const onFilterAll = useCallback(() => changeFilter('all', id), [changeFilter, id])\n\n    const onFilterActive = useCallback(() => changeFilter('active', id), [changeFilter, id])\n\n    const onFilterComplete = useCallback(() => changeFilter('completed', id), [changeFilter, id])\n\n    /* const createTaskTitle = useCallback(\n        (title: string) => {\n            dispatch(addTaskAC(title, props.todolist.id));\n        },\n        [dispatch, props.todolist.id]\n    );\n\n    const onFilterAll = useCallback(() => {\n        dispatch(ChangeTodolistFilterAC(props.todolist.id, \"all\"));\n    }, [dispatch, props.todolist.id]);\n\n    const onFilterActive = useCallback(() => {\n        dispatch(ChangeTodolistFilterAC(props.todolist.id, \"active\"));\n    }, [dispatch, props.todolist.id]);\n\n    const onFilterCompleted = useCallback(() => {\n        dispatch(ChangeTodolistFilterAC(props.todolist.id, \"completed\"));\n    }, [dispatch, props.todolist.id]);\n\n    const onDeleteTodoList = useCallback(() => {\n        const action = RemoveTodolistAC(props.todolist.id);\n        dispatch(action);\n    }, [dispatch, props.todolist.id]);\n\n    const onChangeTitleListHendler = useCallback(\n        (newTitle: string) => {\n            dispatch(ChangeTodolistTitleAC(props.todolist.id, newTitle));\n        },\n        [dispatch, props.todolist.id]\n    );*/\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan\n                    title={title}\n                    onSaveTitle={updateTitleTask}\n                />\n                <IconButton onClick={removeTodolist}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm addItem={createTask}/>\n            <div>{tasksEls}</div>\n            <Grid container spacing={1}>\n                <Grid item>\n                    <Button\n                        variant={filter === \"all\" ? \"contained\" : \"outlined\"}\n                        onClick={onFilterAll}\n                        className={filter === \"all\" ? \"active-filter\" : \"\"}\n                    >\n                        All\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant={filter === \"active\" ? \"contained\" : \"outlined\"}\n                        color={\"secondary\"}\n                        onClick={onFilterActive}\n                        className={filter === \"active\" ? \"active-filter\" : \"\"}\n                    >\n                        Active\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant={filter === \"completed\" ? \"contained\" : \"outlined\"}\n                        color={\"primary\"}\n                        onClick={onFilterComplete}\n                        className={filter === \"completed\" ? \"active-filter\" : \"\"}\n                    >\n                        Completed\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n    );\n});\n","import React, {useCallback} from \"react\";\nimport \"../../App.css\";\nimport AddItemForm from \"../AddItemForm/AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography,} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {\n    AddTodolistAC,\n    ChangeTodolistFilterAC,\n    ChangeTodolistTitleAC,\n    FilterValuesType,\n    ITodoListDomenType,\n    RemoveTodolistAC\n} from \"../../state/todolists-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {TodoList} from \"../Todolist/TodoList\";\nimport {TasksStateType, TasksStatuses} from \"../../api/tasks-api\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"../../state/tasks-reducer\";\n\nfunction AppWithRedux() {\n    let todoLists = useSelector<AppRootStateType, Array<ITodoListDomenType>>(\n        (state) => state.todolists\n    );\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    let dispatch = useDispatch();\n\n    //add new TodoList\n    const addTodoList = useCallback((title: string) => {\n            dispatch(AddTodolistAC(title));\n        },\n        [dispatch]\n    );\n\n    const changeFilter = useCallback((filter: FilterValuesType, todolistId: string) => {\n        dispatch(ChangeTodolistFilterAC(filter, todolistId))\n    }, [dispatch])\n\n    const onChangeTitleList = useCallback((todolistId: string, title: string) => {\n        dispatch(ChangeTodolistTitleAC(todolistId, title))\n    }, [dispatch])\n\n    const removeTask = useCallback((taskId: string, todolistId: string) => {\n        dispatch(removeTaskAC(taskId, todolistId))\n    }, [dispatch])\n\n    const addTask = useCallback((title: string, todolistId: string) => {\n        dispatch(addTaskAC(title, todolistId))\n    }, [dispatch])\n\n    const onSaveNewTaskTitle = useCallback((id: string, title: string, todolistId: string) => {\n        dispatch(changeTaskTitleAC(id, title, todolistId))\n    }, [dispatch])\n\n\n    const changeTaskStatus = useCallback((id: string, status: TasksStatuses, todolistId: string) => {\n        dispatch(changeTaskStatusAC(id, status, todolistId))\n    }, [dispatch])\n\n\n    const removeTodoList = useCallback((todolistId: string) => {\n        dispatch(RemoveTodolistAC(todolistId))\n    }, [dispatch])\n\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">News</Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: \"20px\"}}>\n                    <AddItemForm addItem={addTodoList}/>\n                </Grid>\n                {/*to render our few TodoList we need to use .map function*/}\n                <Grid container spacing={3}>\n                    {todoLists.map((tl) => {\n                        return (\n                            <Grid item key={tl.id}>\n                                <Paper elevation={3} style={{padding: \"10px\"}}>\n                                    <TodoList todolist={tl}\n                                              changeFilter={changeFilter}\n                                              onChangeTitleList={onChangeTitleList}\n                                              tasks={tasks[tl.id]}\n                                              removeTask={removeTask}\n                                              addTask={addTask}\n                                              onSaveNewTaskTitle={onSaveNewTaskTitle}\n                                              changeStatus={changeTaskStatus}\n                                              removeTodoList={removeTodoList}\n                                    />\n                                </Paper>\n                            </Grid>\n                        );\n                    })}\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport AppWithRedux from \"./components/AppWithRedux/AppWithRedux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppWithRedux />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}