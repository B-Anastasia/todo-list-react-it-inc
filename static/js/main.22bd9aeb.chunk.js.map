{"version":3,"sources":["serviceWorker.ts","state/tasks-reducer.ts","state/todolists-reducer.ts","state/store.ts","AddItemForm/AddItemForm.tsx","EditableSpan/EditableSpan.tsx","Task/Task.tsx","TodoList.tsx","AppWithRedux/AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","newArr","tasks","taskId","property","propName","map","t","id","ChangeTodolistFilterAC","todolistId","filter","type","rootReducer","combineReducers","state","action","newTask","v1","title","isDone","newState","todolists","tl","todolist","find","store","createStore","AddItemForm","React","memo","props","console","log","useState","val","setVal","error","setError","addNewItem","trim","addItem","onBlur","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","onFocus","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","newTitle","setNewTitle","autoFocus","onSaveTitle","onDoubleClick","Task","key","task","Checkbox","checked","newIsDone","changeTaskStatus","changeTaskTitle","removeTask","Delete","TodoList","useSelector","dispatch","useDispatch","tasksForTodoList","el","tasksEls","changeTaskStatusAC","changeTaskTitleAC","createTaskTitle","useCallback","addTaskAC","onFilterAll","onFilterActive","onFilterCompleted","onDeleteTodoList","onChangeTitleListHendler","Grid","container","spacing","item","Button","className","AppWithRedux","todoLists","addTodoList","AddTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","style","padding","Paper","elevation","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.22bd9aeb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { TasksStateType, TaskType } from \"../App\";\nimport { v1 } from \"uuid\";\nimport {\n  AddTodolistActionType,\n  RemoveTodolistActionType,\n} from \"./todolists-reducer\";\n\nexport type RemoveTaskType = {\n  type: \"REMOVE_TASK\";\n  taskId: string;\n  todolistId: string;\n};\nexport type AddTaskType = {\n  type: \"ADD_TASK\";\n  title: string;\n  todolistId: string;\n};\nexport type ChangeTaskStatusType = {\n  type: \"CHANGE_STATUS_TASK\";\n  id: string;\n  isDone: boolean;\n  todolistId: string;\n};\nexport type ChangeTaskTitleType = {\n  type: \"CHANGE_TITLE_TASK\";\n  id: string;\n  title: string;\n  todolistId: string;\n};\n\ntype ActionsType =\n  | RemoveTaskType\n  | AddTaskType\n  | ChangeTaskStatusType\n  | ChangeTaskTitleType\n  | AddTodolistActionType\n  | RemoveTodolistActionType;\n\nconst initialState: TasksStateType = {};\n\nexport const tasksReducer = (\n  state: TasksStateType = initialState,\n  action: ActionsType\n) => {\n  switch (action.type) {\n    case \"REMOVE_TASK\":\n      return {\n        ...state,\n        [action.todolistId]: [...state[action.todolistId]].filter(\n          (t) => t.id !== action.taskId\n        ),\n      };\n    case \"ADD_TASK\":\n      const newTask = {\n        id: v1(),\n        title: action.title,\n        isDone: false,\n      };\n      return {\n        ...state,\n        [action.todolistId]: [newTask, ...state[action.todolistId]],\n      };\n    case \"CHANGE_STATUS_TASK\":\n      return {\n        ...state,\n        [action.todolistId]: newArr(\n          state[action.todolistId],\n          action.id,\n          action.isDone\n        ),\n      };\n    case \"CHANGE_TITLE_TASK\":\n      return {\n        ...state,\n        [action.todolistId]: newArr(\n          state[action.todolistId],\n          action.id,\n          action.title\n        ),\n        // [action.todolistId]:state[action.todolistId].map(t=>t.id===action.id? {...t,title:action.title}:t)\n      };\n    case \"ADD-TODOLIST\":\n      return {\n        ...state,\n        [action.todolistId]: [],\n      };\n    case \"REMOVE-TODOLIST\":\n      const newState = { ...state };\n      delete newState[action.id];\n\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport const removeTaskAC = (\n  taskId: string,\n  todolistId: string\n): RemoveTaskType => {\n  return { type: \"REMOVE_TASK\", taskId, todolistId };\n};\nexport const addTaskAC = (title: string, todolistId: string): AddTaskType => {\n  return { type: \"ADD_TASK\", title, todolistId };\n};\n\nexport const changeTaskStatusAC = (\n  id: string,\n  isDone: boolean,\n  todolistId: string\n): ChangeTaskStatusType => {\n  return { type: \"CHANGE_STATUS_TASK\", id, isDone, todolistId };\n};\nexport const changeTaskTitleAC = (\n  id: string,\n  title: string,\n  todolistId: string\n): ChangeTaskTitleType => {\n  return { type: \"CHANGE_TITLE_TASK\", id, title, todolistId };\n};\n\nconst newArr = (\n  tasks: Array<TaskType>,\n  taskId: string,\n  property: boolean | string\n): Array<TaskType> => {\n  let propName = typeof property === \"boolean\" ? \"isDone\" : \"title\";\n\n  return tasks.map((t) =>\n    t.id === taskId ? { ...t, [propName]: property } : t\n  );\n};\n","import { FilterValuesType, TodolistType } from \"../App\";\nimport { v1 } from \"uuid\";\n\nexport type RemoveTodolistActionType = {\n  type: \"REMOVE-TODOLIST\";\n  id: string;\n};\nexport type AddTodolistActionType = {\n  type: \"ADD-TODOLIST\";\n  title: string;\n  todolistId: string;\n};\nexport type ChangeTodolistTitleActionType = {\n  type: \"CHANGE-TODOLIST-TITLE\";\n  id: string;\n  title: string;\n};\nexport type ChangeTodolistFilterActionType = {\n  type: \"CHANGE-TODOLIST-FILTER\";\n  id: string;\n  filter: FilterValuesType;\n};\n\ntype ActionsType =\n  | RemoveTodolistActionType\n  | AddTodolistActionType\n  | ChangeTodolistTitleActionType\n  | ChangeTodolistFilterActionType;\n\nconst initialState: Array<TodolistType> = [];\n\nexport const todolistsReducer = (\n  state: Array<TodolistType> = initialState,\n  action: ActionsType\n): Array<TodolistType> => {\n  switch (action.type) {\n    case \"REMOVE-TODOLIST\":\n      return state.filter((tl) => tl.id !== action.id);\n    case \"ADD-TODOLIST\":\n      return [\n        ...state,\n        { id: action.todolistId, title: action.title, filter: \"all\" },\n      ];\n    case \"CHANGE-TODOLIST-TITLE\": {\n      const todolist = state.find((tl) => tl.id === action.id);\n      if (todolist) {\n        // если нашёлся - изменим ему заголовок\n        todolist.title = action.title;\n      }\n      return [...state];\n    }\n    case \"CHANGE-TODOLIST-FILTER\": {\n      /*const todolist = state.find((tl) => tl.id === action.id);\n      if (todolist) {\n        // если нашёлся - изменим ему заголовок\n        todolist.filter = action.filter;\n      }*/\n      return state.map((tl) =>\n        tl.id === action.id ? { ...tl, filter: action.filter } : tl\n      );\n    }\n    default:\n      return state;\n  }\n};\n\nexport const RemoveTodolistAC = (\n  todolistId: string\n): RemoveTodolistActionType => {\n  return { type: \"REMOVE-TODOLIST\", id: todolistId };\n};\nexport const AddTodolistAC = (title: string): AddTodolistActionType => {\n  return { type: \"ADD-TODOLIST\", title, todolistId: v1() };\n};\nexport const ChangeTodolistTitleAC = (\n  todolistId: string,\n  title: string\n): ChangeTodolistTitleActionType => {\n  return { type: \"CHANGE-TODOLIST-TITLE\", title: title, id: todolistId };\n};\nexport const ChangeTodolistFilterAC = (\n  todolistId: string,\n  filter: FilterValuesType\n): ChangeTodolistFilterActionType => {\n  return { type: \"CHANGE-TODOLIST-FILTER\", filter: filter, id: todolistId };\n};\n","import { tasksReducer } from \"./tasks-reducer\";\nimport { todolistsReducer } from \"./todolists-reducer\";\nimport { combineReducers, createStore } from \"redux\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todolists: todolistsReducer,\n});\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\nimport { IconButton, TextField } from \"@material-ui/core\";\nimport { AddBox } from \"@material-ui/icons\";\n\nexport type AddItemFormPropsType = {\n  addItem: (val: string) => void;\n};\n\nconst AddItemForm = React.memo((props: AddItemFormPropsType) => {\n  console.log(\"AddItemForm is called\");\n\n  let [val, setVal] = useState<string>(\"\");\n  let [error, setError] = useState<string | null>(null);\n  const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n    if (error !== null) setError(null);\n    setVal(e.currentTarget.value);\n  };\n  const onKeyPressAdd = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (error !== null) setError(null);\n\n    if (e.charCode === 13) {\n      addNewItem();\n    }\n    // console.log(e.charCode);\n  };\n  const addNewItem = () => {\n    if (val.trim() !== \"\") {\n      props.addItem(val);\n    } else {\n      setError(\"Title is required\");\n    }\n    setVal(\"\");\n  };\n  //add task only when enter+alt but if enter so next line\n  /*  const onClickNewLine = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n      if (e.key === \"Enter\" && e.altKey) {\n        addNewItem();\n      } else if (e.key === \"Enter\") {\n        setVal(`${val}\\r\\n`);\n      }\n    };*/\n\n  return (\n    <div onBlur={() => setError(null)}>\n      {/*   <textarea onChange={onChangeText} value={val} onKeyUp={onClickNewLine}>\n          {val}\n        </textarea>*/}\n      <TextField\n        variant={\"outlined\"}\n        value={val}\n        onChange={onChangeInput}\n        onKeyPress={onKeyPressAdd}\n        onFocus={() => setError(null)}\n        label={\"Title\"}\n        error={!!error}\n        helperText={error}\n      />\n      {/* <input\n        type=\"text\"\n        value={val}\n        onChange={onChangeInput}\n        onKeyPress={onKeyPressAdd}\n        onFocus={() => setError(null)}\n        className={error ? \"error\" : \"\"}\n      />*/}\n      {/*{error && <div className={\"error-message\"}>{error}</div>}*/}\n      {/*<button onClick={addNewItem}>+</button>*/}\n      <IconButton color={\"primary\"} onClick={addNewItem}>\n        <AddBox />\n      </IconButton>\n    </div>\n  );\n});\n\nexport default AddItemForm;\n","import React, { ChangeEvent, useState } from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\nexport type EditableSpanPropsType = {\n  title: string;\n  onSaveTitle: (newTitle: string) => void;\n};\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  console.log(\"EditableSpan\");\n  let [editMode, setEditMode] = useState<boolean>(false);\n  let [newTitle, setNewTitle] = useState<string>(\"\");\n  const onEditMode = () => {\n    setNewTitle(props.title);\n    setEditMode(true);\n  };\n  const offEditMode = () => {\n    if (newTitle.trim()) {\n      props.onSaveTitle(newTitle);\n    } else {\n      //check on empty string\n      //couldn't insert empty task\n      setNewTitle(props.title);\n    }\n    setEditMode(false);\n  };\n\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(e.currentTarget.value);\n  };\n\n  return editMode ? (\n    /*<input\n          autoFocus={true}\n          onBlur={offEditMode}\n          value={newTitle}\n          onChange={changeTitle}\n        />*/\n    <TextField\n      autoFocus={true}\n      onBlur={offEditMode}\n      value={newTitle}\n      onChange={changeTitle}\n    />\n  ) : (\n    <span onDoubleClick={onEditMode}>{props.title}</span>\n  );\n});\n","import React, { ChangeEvent } from \"react\";\nimport { Checkbox, IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport { TaskType } from \"../App\";\nimport { EditableSpan } from \"../EditableSpan/EditableSpan\";\n\ntype TaskPropsType = {\n  changeTaskStatus: (newIsDone: boolean, id: string) => void;\n  changeTaskTitle: (newTitle: string, id: string) => void;\n  removeTask: (id: string) => void;\n  task: TaskType;\n};\nexport const Task = React.memo((props: TaskPropsType) => {\n  const onRemoveTask = () => props.removeTask(props.task.id);\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    let newIsDone = e.currentTarget.checked; //new value checked for checked task\n    props.changeTaskStatus(newIsDone, props.task.id);\n  };\n\n  const changeT = (newTitle: string) => {\n    props.changeTaskTitle(newTitle, props.task.id);\n  };\n\n  return (\n    <div key={props.task.id}>\n      <Checkbox\n        checked={props.task.isDone}\n        onChange={onChangeHandler}\n        color={\"primary\"}\n      />\n      <EditableSpan title={props.task.title} onSaveTitle={changeT} />\n      <IconButton onClick={onRemoveTask}>\n        <Delete />\n      </IconButton>\n    </div>\n  );\n});\n","import React, {useCallback} from \"react\";\nimport {FilterValuesType, TaskType} from \"./App\";\nimport AddItemForm from \"./AddItemForm/AddItemForm\";\nimport {Grid, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport Button from \"@material-ui/core/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\n// import { TasksStateType, TodolistType } from \"./AppWithRedux\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC,} from \"./state/tasks-reducer\";\nimport {ChangeTodolistFilterAC, ChangeTodolistTitleAC, RemoveTodolistAC,} from \"./state/todolists-reducer\";\nimport {TodolistType} from \"./AppWithHookReducer\";\nimport {EditableSpan} from \"./EditableSpan/EditableSpan\";\nimport {Task} from \"./Task/Task\";\n\ntype TodoListPropsType = {\n  todolist: TodolistType;\n  id?: string;\n  title?: string;\n  filter?: FilterValuesType;\n  onChangeTitleList?: (newTitle: string, todoListId: string) => void;\n  tasks?: Array<TaskType>;\n  removeTask?: (id: string, todoListId: string) => void;\n  addTask?: (val: string, todoListId: string) => void;\n  onSaveNewTaskTitle?: (\n    newTitle: string,\n    taskId: string,\n    todoListId: string\n  ) => void;\n  changeStatus?: (taskId: string, isDone: boolean, todoListID: string) => void;\n  changeFilter?: (id: string, value: FilterValuesType) => void;\n  removeTodoList?: (todoListID: string) => void;\n};\n\nexport const TodoList = React.memo((props: TodoListPropsType) => {\n  console.log(\"TodoList is called\");\n  // let todoLists = useSelector<AppRootStateType, TodolistType>(\n  //   (state) => state.todolists && todoLists.find((t) => t.id === props.id)\n  // );\n  let tasks = useSelector<AppRootStateType, Array<TaskType>>(\n    (state) => state.tasks[props.todolist.id]\n  );\n  let dispatch = useDispatch();\n\n  //to filter tasks\n  let tasksForTodoList = tasks;\n  if (props.todolist.filter === \"active\") {\n    tasksForTodoList = tasksForTodoList.filter((el) => !el.isDone);\n  }\n  if (props.todolist.filter === \"completed\") {\n    tasksForTodoList = tasksForTodoList.filter((el) => el.isDone);\n  }\n\n  /*  let [val, setVal] = useState<string>(\"\");\n      let [error, setError] = useState<string | null>(null);*/\n\n  /*  const addNewTask = () => {\n        if (val.trim() !== \"\") {\n          addTask(val, props.id);\n        } else {\n          setError(\"Title is required\");\n        }\n        setVal(\"\");\n      };*/\n\n  /*  const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        setVal(e.currentTarget.value);\n      };\n      const onChangeText = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setError(null);\n        setVal(e.currentTarget.value);\n      };*/\n\n  /*  const onClickNewLine = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === \"Enter\" && e.altKey) {\n          addNewTask();\n        } else if (e.key === \"Enter\") {\n          setVal(`${val}\\r\\n`);\n        }\n      };*/\n\n  /* const onKeyPressAdd = (e: KeyboardEvent<HTMLInputElement>) => {\n        setError(null);\n\n        if (e.charCode === 13) {\n          addNewTask();\n        }\n        // console.log(e.charCode);\n      };*/\n\n  let tasksEls = tasksForTodoList.map((el: TaskType) => {\n    const onRemoveTask = (id: string) =>\n      dispatch(removeTaskAC(id, props.todolist.id));\n\n    const onChangeHandler = (newIsDone: boolean, id: string) => {\n      dispatch(changeTaskStatusAC(id, newIsDone, props.todolist.id));\n    };\n\n    const changeT = (newTitle: string, id: string) => {\n      dispatch(changeTaskTitleAC(id, newTitle, props.todolist.id));\n    };\n\n    return (\n      <Task\n        changeTaskStatus={onChangeHandler}\n        changeTaskTitle={changeT}\n        removeTask={onRemoveTask}\n        task={el}\n      />\n    );\n  });\n\n  const createTaskTitle = useCallback(\n    (title: string) => {\n      dispatch(addTaskAC(title, props.todolist.id));\n    },\n    [dispatch, props.todolist.id]\n  );\n\n  const onFilterAll = useCallback(() => {\n    dispatch(ChangeTodolistFilterAC(props.todolist.id, \"all\"));\n  }, [dispatch, props.todolist.id]);\n\n  const onFilterActive = useCallback(() => {\n    dispatch(ChangeTodolistFilterAC(props.todolist.id, \"active\"));\n  }, [dispatch, props.todolist.id]);\n\n  const onFilterCompleted = useCallback(() => {\n    dispatch(ChangeTodolistFilterAC(props.todolist.id, \"completed\"));\n  }, [dispatch, props.todolist.id]);\n\n  const onDeleteTodoList = useCallback(() => {\n    const action = RemoveTodolistAC(props.todolist.id);\n    dispatch(action);\n  }, [dispatch, props.todolist.id]);\n\n  const onChangeTitleListHendler = useCallback(\n    (newTitle: string) => {\n      dispatch(ChangeTodolistTitleAC(props.todolist.id, newTitle));\n    },\n    [dispatch, props.todolist.id]\n  );\n\n  return (\n    <div>\n      <h3>\n        <EditableSpan\n          title={props.todolist.title}\n          onSaveTitle={(newTitle) => onChangeTitleListHendler(newTitle)}\n        />\n        {/*<button onClick={onDeleteTodoList}>x</button>*/}\n        <IconButton onClick={onDeleteTodoList}>\n          <Delete />\n        </IconButton>\n      </h3>\n      <AddItemForm addItem={createTaskTitle} />\n      {/*<div>\n           <textarea onChange={onChangeText} value={val} onKeyUp={onClickNewLine}>\n          {val}\n        </textarea>\n        <input\n          type=\"text\"\n          value={val}\n          onChange={onChangeInput}\n          onKeyPress={onKeyPressAdd}\n          onFocus={() => setError(null)}\n          className={error ? \"error\" : \"\"}\n        />\n        {error && <div className={\"error-message\"}>{error}</div>}\n        <button onClick={addNewTask}>+</button>\n      </div>*/}\n      <div>{tasksEls}</div>\n      <Grid container spacing={1}>\n        <Grid item>\n          <Button\n            variant={props.todolist.filter === \"all\" ? \"contained\" : \"outlined\"}\n            onClick={onFilterAll}\n            className={props.todolist.filter === \"all\" ? \"active-filter\" : \"\"}\n          >\n            All\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            variant={\n              props.todolist.filter === \"active\" ? \"contained\" : \"outlined\"\n            }\n            color={\"secondary\"}\n            onClick={onFilterActive}\n            className={\n              props.todolist.filter === \"active\" ? \"active-filter\" : \"\"\n            }\n          >\n            Active\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button\n            variant={\n              props.todolist.filter === \"completed\" ? \"contained\" : \"outlined\"\n            }\n            color={\"primary\"}\n            onClick={onFilterCompleted}\n            className={\n              props.todolist.filter === \"completed\" ? \"active-filter\" : \"\"\n            }\n          >\n            Completed\n          </Button>\n        </Grid>\n      </Grid>\n    </div>\n  );\n});\n","import React, { useCallback } from \"react\";\nimport \"../App.css\";\nimport { TodoList } from \"../TodoList\";\nimport AddItemForm from \"../AddItemForm/AddItemForm\";\nimport {\n  AppBar,\n  Button,\n  IconButton,\n  Toolbar,\n  Typography,\n  Container,\n  Grid,\n  Paper,\n} from \"@material-ui/core\";\nimport { Menu } from \"@material-ui/icons\";\nimport { AddTodolistAC } from \"../state/todolists-reducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateType } from \"../state/store\";\n\nexport type TaskType = {\n  id: string;\n  title: string;\n  isDone: boolean;\n};\n\n//create new type for our few todoLists\nexport type TodolistType = {\n  id: string;\n  title: string;\n  filter: FilterValuesType;\n};\n\n//new type for associative array\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>;\n};\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\n\nfunction AppWithRedux() {\n  let todoLists = useSelector<AppRootStateType, Array<TodolistType>>(\n    (state) => state.todolists\n  );\n  let dispatch = useDispatch();\n\n  //create new structure of the few todolists\n  /*  let [todoLists, dispatchToTodolists] = useReducer(todolistsReducer, [\n          { id: todoListID1, title: \"Books\", filter: \"all\" },\n          { id: todoListID2, title: \"Songs\", filter: \"active\" },\n        ]);\n\n        let [tasks, dispatchToTasks] = useReducer(tasksReducer, {\n          [todoListID1]: [\n            { id: v1(), title: \"MobX\", isDone: true },\n            { id: v1(), title: \"Redux\", isDone: false },\n          ],\n          [todoListID2]: [\n            { id: v1(), title: \"React\", isDone: false },\n            { id: v1(), title: \"MobX\", isDone: true },\n            { id: v1(), title: \"Redux\", isDone: false },\n          ],\n        });*/\n  /*\n      function removeTask(id: string, todoListId: string) {\n        const action = removeTaskAC(id, todoListId);\n        dispatch(action);\n      }\n\n      function addTask(val: string, todoListId: string) {\n        const action = addTaskAC(val, todoListId);\n        dispatch(action);\n      }\n\n      function changeStatus(taskId: string, isDone: boolean, todoListID: string) {\n        const action = changeTaskStatusAC(taskId, isDone, todoListID);\n        dispatch(action);\n      }\n\n      const onSaveNewTaskTitle = (\n        newTitle: string,\n        taskId: string,\n        todoListId: string\n      ) => {\n        dispatch(changeTaskTitleAC(taskId, newTitle, todoListId));\n      };\n\n      //add id to the function, change filter value in the todolist.id===id\n      function changeFilter(id: string, value: FilterValuesType) {\n        dispatch(ChangeTodolistFilterAC(id, value));\n      }\n\n      const onChangeTitleList = (newTitle: string, todoListsId: string) => {\n        dispatch(ChangeTodolistTitleAC(todoListsId, newTitle));\n      };\n\n      function removeTodoList(todoListID: string) {\n        const action = RemoveTodolistAC(todoListID);\n        dispatch(action);\n      }*/\n\n  //add new TodoList\n  const addTodoList = useCallback(\n    (title: string) => {\n      const action = AddTodolistAC(title);\n      dispatch(action);\n    },\n    [dispatch]\n  );\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\">News</Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n      <Container fixed>\n        <Grid container style={{ padding: \"20px\" }}>\n          <AddItemForm addItem={addTodoList} />\n        </Grid>\n        {/*to render our few TodoList we need to use .map function*/}\n        <Grid container spacing={3}>\n          {todoLists.map((tl) => {\n            // before return the list we need to filter it\n            /*let tasksForTodoList = tasks[tl.id];\n\n                        if (tl.filter === \"active\") {\n                          tasksForTodoList = tasksForTodoList.filter((el) => !el.isDone);\n                        }\n                        if (tl.filter === \"completed\") {\n                          tasksForTodoList = tasksForTodoList.filter((el) => el.isDone);\n                        }*/\n            return (\n              <Grid item key={tl.id}>\n                <Paper elevation={3} style={{ padding: \"10px\" }}>\n                  <TodoList\n                    todolist={tl}\n                    // id={tl.id}\n                    // title={tl.title}\n                    // filter={tl.filter}\n                    // onChangeTitleList={onChangeTitleList}\n                    // removeTodoList={removeTodoList}\n                    // changeFilter={changeFilter}\n                    // removeTask={removeTask}\n                    // addTask={addTask}\n                    // tasks={tasksForTodoList}\n                    // changeStatus={changeStatus}\n                    // onSaveNewTaskTitle={onSaveNewTaskTitle}\n                  />\n                </Paper>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default AppWithRedux;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./state/store\";\nimport AppWithRedux from \"./AppWithRedux/AppWithRedux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppWithRedux />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}